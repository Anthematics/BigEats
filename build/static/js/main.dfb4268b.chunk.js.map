{"version":3,"sources":["logo.svg","components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","components/Util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSortbyClass","sortByOption","state","sortBy","term","location","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","handleSortByChange","setState","event","target","value","searchYelp","preventDefault","_this2","keys","map","sortByOptionValue","react_default","a","createElement","className","key","onClick","renderSortByOptions","onChange","placeholder","React","Component","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","components_Business_Business","id","yelpApiKey","process","yelp","fetch","concat","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zipcode","categories","title","review_count","App","_Component","Yelp","inherits","createClass","components_SearchBar_SearchBar","components_BusinessList_BusinessList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfb4268b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './SearchBar.css'\n\n\n\n\n/*\n\n1. getSortByClass would not return anything if I did not\nrefer to this.state since it is in the this.state object\n\n2. This Function Returns the current CSS class for a sorting option.\n*/\n\n\n/*\nThis second method (handleSortByChange) updates the state by calling .setState to set the state to the sortByOption\nthis seems to mean that the css class should === the state.\n*/\n\nconst sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n            }\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props)\n            this.state = {\n                term: '',\n                location: '',\n                sortBy: 'best_match'\n            };\n\n        this.handleTermChange = this.handleTermChange.bind(this)\n        this.handleLocationChange = this.handleLocationChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        this.handleSortByChange = this.handleSortByChange.bind(this)\n        }\n\n    getSortbyClass = (sortByOption) => {\n        if (this.state.sortBy === sortByOption) {\n            return 'active'\n        } return ''\n\n    }\n// sortBy is in the this.state object.\n    handleSortByChange(sortByOption) {\n        this.setState({sortBy: sortByOption})\n    }\n        // this.setState({this.sortBy = sortByOption})  - old code repaste if change doesnt work\n    //stop forgetting to add {} for Javascript !!\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value})\n    }\n\n    handleLocationChange(event) {\n        this.setState({location: event.target.value})\n    }\n\n//if it cannot read event of undefined\n    handleSearch(event) {\n        this.props.searchYelp(\n            this.state.term,\n            this.state.location,\n            this.state.sortBy,\n        );\n        event.preventDefault();\n    }\n\n\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map(sortByOption => {\n            const sortByOptionValue = sortByOptions[sortByOption];\n            return <li\n            className = {this.getSortbyClass(sortByOptionValue)}\n            key = {sortByOptionValue}\n            onClick = {this.handleSortByChange.bind(this, sortByOptionValue)}>\n            {sortByOptionValue}\n            </li>\n        })\n    }\n\n/* renderSortByOptions -> goal is to \"stick to\" the selected element once selected in the browser.\nline 1 return object keys -> we map sort by options into their individual parts ,\nin this case only the keys (\"best_match, rating , review_count\") matter since theyre the dynamic part of the returned information\nline 2 Save it to a variable cause otherwise the return won't know what to do.\n\n*/\nrender() {\n        return(\n    <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n            <ul>\n                {this.renderSortByOptions()}\n            </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n            <input onChange={this.handleTermChange}\n            placeholder=\"Search Businesses\" />\n            <input onChange={this.handleLocationChange}\n            placeholder=\"Where?\" />\n        </div>\n    {/* may need to switch div closing tags back */}\n        <div className=\"SearchBar-submit\">\n            <a onClick = {this.handleSearch}>Let's Go</a>\n        </div>\n    </div>\n        );\n    }\n}\n\nexport default SearchBar;\n\n// Line 14 might not be this.sortByOptionValue (maybe remove this)\n\n/* Mistakes\nDid not capitalize SearchBar properly , causing issues with the export\nDid not use event.preventDefault in the correct scope (prevent default had to be called on the whole function to prevent default from all results)\nCalled searchYelp without adding .props to this so it did not call the function properly from app.js\n*/\n\n/* More mistakes\n\nTypeError: Cannot convert undefined or null to object\n-> This happened because I tried to return keys of an object that did not exist\n-> This object had to be defined in the constructor so that way it would not come back null (keep within that scope).\n\n*/","/* The Purpose of the business component is to represent how a business\nwill be formatted and styled in the app. */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './Business.css'\n\n\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\n                </div>\n            <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                        <ul className=\"Business-address\">\n                            <li> street address:{this.props.business.address} </li>\n                            <li> city: {this.props.business.city} </li>\n                            <li> state:{this.props.business.state} </li>\n                            <li> zip/postal code{this.props.business.zipCode} </li>\n                        </ul>\n                    </div>\n                <div className=\"Business-reviews\">\n                    <h3>{this.props.business.category}</h3>\n                    <h2 className=\"rating\"> Rating {this.props.business.rating}</h2>\n                    <p> Review Count {this.props.business.reviewCount}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Business;\n\n","import React from 'react'\nimport './BusinessList.css'\nimport Business from '../Business/Business.js'\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n        <div className=\"BusinessList\">\n            {\n                this.props.businesses.map(business => {\n                    return <Business key = {business.id} business={business} />\n                })\n            }\n        </div>\n        );\n    }\n}\n\nexport default BusinessList;\n","const yelpApiKey=process.env.yelpApiKey\n\n\nconst yelp = {\n  searchYelp(term,location,sortBy) {\n    return fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n      {headers:{Authorization: `Bearer ${yelpApiKey}`,\n    },\n  }).then((response) => {\n    return response.json();\n  }).then((jsonResponse) => {\n    if (jsonResponse.businesses) {\n      return jsonResponse.businesses.map(((business)=> {\n        return {\n          name: business.name,\n          id: business.id,\n          imageSrc: business.image_url,\n          address: business.location.address1, /* (in locations) */\n          city: business.location.city, /* */\n          state: business.location.state,\n          zipcode: business.location.zipCode,\n          category: business.categories.title,\n          rating: business.rating,\n          reviewCount: business.review_count\n        };\n      }));\n    }\n  })\n  }\n}\nexport default yelp","\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchBar from './components/SearchBar/SearchBar'\nimport BusinessList from './components/BusinessList/BusinessList'\nimport Business from './components/Business/Business'\nimport Yelp from './components/Util/Yelp'\n\n//Maybe not in capitals ^^git diff\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      'businesses': [],\n    };\n    this.searchYelp = this.searchYelp.bind(this) // I put the bind in without remembering to make this.searchYelp = that bind\n  }\n    businesses = []\n\n    searchYelp = (term,location,sortBy) => {\n      Yelp.searchYelp(term,location,sortBy).then(\n        businesses => {\n          this.setState({\n            businesses : businesses\n          })\n        }\n      )\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Big Eats</h1>\n        <SearchBar searchYelp= {this.searchYelp} />\n        <BusinessList businesses = {this.state.businesses}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}